package translations

import (
	. "github.com/mjarkk/laravalidate"
	"golang.org/x/text/language"
)

func RegisterFrTranslations() {
	RegisterMessages(language.French, map[string]MessageResolver{
		"accepted": BasicMessageResolver("Le champ :attribute doit être accepté."),
		// "accepted_if": BasicMessageResolver("Le champ :attribute doit être accepté lorsque :other est :value."),
		"active_url":     BasicMessageResolver("Le champ :attribute doit être une URL valide."),
		"after":          BasicMessageResolver("Le champ :attribute doit être une date postérieure à :date."),
		"after_or_equal": BasicMessageResolver("Le champ :attribute doit être une date postérieure ou égale à :date."),
		"alpha":          BasicMessageResolver("Le champ :attribute ne doit contenir que des lettres."),
		"alpha_dash":     BasicMessageResolver("Le champ :attribute ne doit contenir que des lettres, des nombres, des tirets et des traits de soulignement."),
		"alpha_numeric":  BasicMessageResolver("Le champ :attribute ne doit contenir que des lettres et des nombres."),
		// "array":     BasicMessageResolver("Le champ :attribute doit être un tableau."),
		"ascii":           BasicMessageResolver("Le champ :attribute ne doit contenir que des caractères alphanumériques et des symboles à un octet."),
		"bail":            BasicMessageResolver("Le champ :attribute doit passer."),
		"before":          BasicMessageResolver("Le champ :attribute doit être une date antérieure à :date."),
		"before_or_equal": BasicMessageResolver("Le champ :attribute doit être une date antérieure ou égale à :date."),
		"between": MessageHintResolver{
			Fallback: "Le champ :attribute doit être compris entre :arg0 et :arg1.",
			Hints: map[string]string{
				"array":   "Le champ :attribute doit avoir entre :arg0 et :arg1 éléments.",
				"file":    "Le champ :attribute doit être compris entre :arg0 et :arg1 kilo-octets.",
				"numeric": "Le champ :attribute doit être compris entre :arg0 et :arg1.",
				"string":  "Le champ :attribute doit être compris entre :arg0 et :arg1 caractères.",
			},
		},
		"boolean": BasicMessageResolver("Le champ :attribute doit être vrai ou faux."),
		// "can": BasicMessageResolver("Le champ :attribute contient une valeur non autorisée."),
		"confirmed": BasicMessageResolver("La confirmation du champ :attribute ne correspond pas."),
		// "contains":  BasicMessageResolver("Le champ :attribute est manquant une valeur requise."),
		// "current_password": BasicMessageResolver("Le mot de passe est incorrect."),
		"date": BasicMessageResolver("Le champ :attribute doit être une date valide."),
		// "date_equals": BasicMessageResolver("Le champ :attribute doit être une date égale à :date."),
		"date_format": BasicMessageResolver("Le champ :attribute doit correspondre au format :arg."),
		// "decimal": BasicMessageResolver("Le champ :attribute doit avoir :arg décimales."),
		"declined": BasicMessageResolver("Le champ :attribute doit être refusé."),
		// "declined_if": BasicMessageResolver("Le champ :attribute doit être refusé lorsque :other est :value."),
		// "different":   BasicMessageResolver("Le champ :attribute et :other doivent être différents."),
		"digits":         BasicMessageResolver("Le champ :attribute doit être de :digits chiffres."),
		"digits_between": BasicMessageResolver("Le champ :attribute doit être compris entre :arg0 et :arg1 chiffres."),
		// "dimensions":        BasicMessageResolver("Le champ :attribute a des dimensions d'image non valides."),
		// "distinct":          BasicMessageResolver("Le champ :attribute a une valeur en double."),
		// "doesnt_end_with":   BasicMessageResolver("Le champ :attribute ne doit pas se terminer par l'un des éléments suivants : :args."),
		// "doesnt_start_with": BasicMessageResolver("Le champ :attribute ne doit pas commencer par l'un des éléments suivants : :args."),
		"email":     BasicMessageResolver("Le champ :attribute doit être une adresse e-mail valide."),
		"ends_with": BasicMessageResolver("Le champ :attribute doit se terminer par l'un des éléments suivants : :args."),
		// "enum":    BasicMessageResolver("Le :attribute sélectionné est non valide."),
		"exists":     BasicMessageResolver("Le :attribute sélectionné est non valide."),
		"extensions": BasicMessageResolver("Le champ :attribute doit avoir l'une des extensions suivantes : :args."),
		// "file":       BasicMessageResolver("Le champ :attribute doit être un fichier."),
		"filled": BasicMessageResolver("Le champ :attribute doit avoir une valeur."),
		"gt": MessageHintResolver{Hints: map[string]string{
			"array":   "Le champ :attribute doit avoir plus de :value éléments.",
			"file":    "Le champ :attribute doit être supérieur à :value kilo-octets.",
			"numeric": "Le champ :attribute doit être supérieur à :value.",
			"string":  "Le champ :attribute doit être supérieur à :value caractères.",
		}},
		"gte": MessageHintResolver{Hints: map[string]string{
			"array":   "Le champ :attribute doit avoir au moins :value éléments.",
			"file":    "Le champ :attribute doit être supérieur ou égal à :value kilo-octets.",
			"numeric": "Le champ :attribute doit être supérieur ou égal à :value.",
			"string":  "Le champ :attribute doit être supérieur ou égal à :value caractères.",
		}},
		"hex_color": BasicMessageResolver("Le champ :attribute doit être une couleur hexadécimale valide."),
		// "image":     BasicMessageResolver("Le champ :attribute doit être une image."),
		"in": BasicMessageResolver("Le :attribute sélectionné est non valide."),
		// "in_array":  BasicMessageResolver("Le champ :attribute doit exister dans :other."),
		// "integer":   BasicMessageResolver("Le champ :attribute doit être un entier."),
		"ip":   BasicMessageResolver("Le champ :attribute doit être une adresse IP valide."),
		"ipv4": BasicMessageResolver("Le champ :attribute doit être une adresse IPv4 valide."),
		"ipv6": BasicMessageResolver("Le champ :attribute doit être une adresse IPv6 valide."),
		"json": BasicMessageResolver("Le champ :attribute doit être une chaîne JSON valide."),
		// "list":      BasicMessageResolver("Le champ :attribute doit être une liste."),
		"lowercase": BasicMessageResolver("Le champ :attribute doit être en minuscules."),
		"lt": MessageHintResolver{Hints: map[string]string{
			"array":   "Le champ :attribute doit avoir moins de :value éléments.",
			"file":    "Le champ :attribute doit être inférieur à :value kilo-octets.",
			"numeric": "Le champ :attribute doit être inférieur à :value.",
			"string":  "Le champ :attribute doit être inférieur à :value caractères.",
		}},
		"lte": MessageHintResolver{Hints: map[string]string{
			"array":   "Le champ :attribute ne doit pas avoir plus de :value éléments.",
			"file":    "Le champ :attribute doit être inférieur ou égal à :value kilo-octets.",
			"numeric": "Le champ :attribute doit être inférieur ou égal à :value.",
			"string":  "Le champ :attribute doit être inférieur ou égal à :value caractères.",
		}},
		"mac_address": BasicMessageResolver("Le champ :attribute doit être une adresse MAC valide."),
		"max": MessageHintResolver{
			Fallback: "Le champ :attribute ne doit pas être supérieur à :arg.",
			Hints: map[string]string{
				"array":   "Le champ :attribute ne doit pas avoir plus de :arg éléments.",
				"file":    "Le champ :attribute ne doit pas être supérieur à :arg kilo-octets.",
				"numeric": "Le champ :attribute ne doit pas être supérieur à :arg.",
				"string":  "Le champ :attribute ne doit pas être supérieur à :arg caractères.",
			},
		},
		"max_digits": BasicMessageResolver("Le champ :attribute ne doit pas avoir plus de :max chiffres."),
		"mimes":      BasicMessageResolver("Le champ :attribute doit être un fichier de type : :args."),
		"mimetypes":  BasicMessageResolver("Le champ :attribute doit être un fichier de type : :args."),
		"min": MessageHintResolver{
			Fallback: "Le champ :attribute doit être au moins :arg.",
			Hints: map[string]string{
				"array":   "Le champ :attribute doit avoir au moins :arg éléments.",
				"file":    "Le champ :attribute doit être au moins :arg kilo-octets.",
				"numeric": "Le champ :attribute doit être au moins :arg.",
				"string":  "Le champ :attribute doit être au moins :arg caractères.",
			},
		},
		"min_digits": BasicMessageResolver("Le champ :attribute doit avoir au moins :arg chiffres."),
		// "missing":          BasicMessageResolver("Le champ :attribute doit être manquant."),
		// "missing_if":       BasicMessageResolver("Le champ :attribute doit être manquant lorsque :other est :value."),
		// "missing_unless":   BasicMessageResolver("Le champ :attribute doit être manquant à moins que :other soit :value."),
		// "missing_with":     BasicMessageResolver("Le champ :attribute doit être manquant lorsque :args est présent."),
		// "missing_with_all": BasicMessageResolver("Le champ :attribute doit être manquant lorsque :args sont présents."),
		// "multiple_of":      BasicMessageResolver("Le champ :attribute doit être un multiple de :value."),
		"not_nil":   BasicMessageResolver("Le champ :attribute ne doit pas être nul."),
		"not_in":    BasicMessageResolver("Le :attribute sélectionné est non valide."),
		"not_regex": BasicMessageResolver("Le format du champ :attribute est non valide."),
		"numeric":   BasicMessageResolver("Le champ :attribute doit être un nombre."),
		// "password": MessageHintResolver{Hints: map[string]string{
		// 	"letters":       "Le champ :attribute doit contenir au moins une lettre.",
		// 	"mixed":         "Le champ :attribute doit contenir au moins une majuscule et une minuscule.",
		// 	"numbers":       "Le champ :attribute doit contenir au moins un nombre.",
		// 	"symbols":       "Le champ :attribute doit contenir au moins un symbole.",
		// 	"uncompromised": "Le :attribute donné est apparu dans une fuite de données. Veuillez choisir un autre :attribute.",
		// }},
		// "present":           BasicMessageResolver("Le champ :attribute doit être présent."),
		// "present_if":        BasicMessageResolver("Le champ :attribute doit être présent lorsque :other est :value."),
		// "present_unless":    BasicMessageResolver("Le champ :attribute doit être présent à moins que :other soit :value."),
		// "present_with":      BasicMessageResolver("Le champ :attribute doit être présent lorsque :args est présent."),
		// "present_with_all":  BasicMessageResolver("Le champ :attribute doit être présent lorsque :args sont présents."),
		// "prohibited":        BasicMessageResolver("Le champ :attribute est interdit."),
		// "prohibited_if":     BasicMessageResolver("Le champ :attribute est interdit lorsque :other est :value."),
		// "prohibited_unless": BasicMessageResolver("Le champ :attribute est interdit à moins que :other soit dans :args."),
		// "prohibits":         BasicMessageResolver("Le champ :attribute interdit :other d'être présent."),
		"regex":    BasicMessageResolver("Le format du champ :attribute est non valide."),
		"required": BasicMessageResolver("Le champ :attribute est requis."),
		// "required_array_keys":  BasicMessageResolver("Le champ :attribute doit contenir des entrées pour : :args."),
		// "required_if":          BasicMessageResolver("Le champ :attribute est requis lorsque :other est :value."),
		// "required_if_accepted": BasicMessageResolver("Le champ :attribute est requis lorsque :other est accepté."),
		// "required_if_declined": BasicMessageResolver("Le champ :attribute est requis lorsque :other est refusé."),
		// "required_unless":      BasicMessageResolver("Le champ :attribute est requis à moins que :other soit dans :args."),
		// "required_with":        BasicMessageResolver("Le champ :attribute est requis lorsque :args est présent."),
		// "required_with_all":    BasicMessageResolver("Le champ :attribute est requis lorsque :args sont présents."),
		// "required_without":     BasicMessageResolver("Le champ :attribute est requis lorsque :args n'est pas présent."),
		// "required_without_all": BasicMessageResolver("Le champ :attribute est requis lorsque aucun de :args n'est présent."),
		// "same": BasicMessageResolver("Le champ :attribute doit correspondre à :other."),
		"size": MessageHintResolver{
			Fallback: "Le champ :attribute doit être de taille :arg.",
			Hints: map[string]string{
				"array":   "Le champ :attribute doit contenir :arg éléments.",
				"file":    "Le champ :attribute doit être de :arg kilo-octets.",
				"numeric": "Le champ :attribute doit être :arg.",
				"string":  "Le champ :attribute doit être de :arg caractères.",
			}},
		"starts_with": BasicMessageResolver("Le champ :attribute doit commencer par l'un des éléments suivants : :args."),
		// "string":   BasicMessageResolver("Le champ :attribute doit être une chaîne."),
		// "timezone": BasicMessageResolver("Le champ :attribute doit être un fuseau horaire valide."),
		// "unique":   BasicMessageResolver("Le :attribute a déjà été pris."),
		// "uploaded": BasicMessageResolver("Le champ :attribute n'a pas pu être téléchargé."),
		"uppercase": BasicMessageResolver("Le champ :attribute doit être en majuscules."),
		"url":       BasicMessageResolver("Le champ :attribute doit être une URL valide."),
		"ulid":      BasicMessageResolver("Le champ :attribute doit être un ULID valide."),
		"uuid":      BasicMessageResolver("Le champ :attribute doit être un UUID valide."),
	})

}
